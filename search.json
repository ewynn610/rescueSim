[{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimIntroVignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Intro to rescueSim","text":"rescueSim R package simulating single-cell RNA-sequencing (scRNA-seq) data repeated measures designs, longitudinal studies. One benefit types studies allow researchers investigate changes gene expression time specific cell type. Realistic simulated data data can used evaluate analysis methods assess power variety settings. rescueSim package uses gamma-poisson framework simulate data individual cell-types mimicking important attributes empirical data -sample variability (.e. data cells sample correlated) -subject variability (.e. data samples subject correlated). vignette, outline: overview simulation method basic workflow simulating data generate update object storing simulation parameters estimate simulation parameters data set simulate data using simulation parameters effect adjusting simulation parameters simulated data","code":""},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimIntroVignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Intro to rescueSim","text":"rescueSim available github : https://github.com/ewynn610/rescueSim. can installed using:","code":"if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") } devtools::install_github(\"https://github.com/ewynn610/rescueSim\")"},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimIntroVignette.html","id":"simulation-overview","dir":"Articles","previous_headings":"","what":"Simulation Overview","title":"Intro to rescueSim","text":"rescueSim simulates data set single cell type gene expression counts cells several samples, multiple samples coming individual subjects. user wants data several cell types, process can repeated generate data cell type interest. simulation process can broken three steps (Figure 1): Simulate sample-specific mean expression values gene, values samples subject extra level correlation. Draw cell-level “true” expression values gene using sample-specific values. Simulate final count values cell added variability representing technical effects. seen left hand side Figure 1, simulation framework relies series parameters. can estimated data set provided user supplied manually user. Alternatively, predefined parameter values estimated longitudinal scRNA-Seq data set bronchoalveolar lavage samples healthy adult subjects included package. Users can use combination predefined supplied parameters parameters estimated empirical data. particularly useful situations multi-sample/multi-time point data available case , , simulation parameters can estimated empirical data.","code":""},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimIntroVignette.html","id":"workflow-basics","dir":"Articles","previous_headings":"","what":"Workflow Basics","title":"Intro to rescueSim","text":"simulation workflow includes two broad steps: Generating simulation parameters (using RescueSimParams() estimateRescueSimParams()) Using simulation parameters simulate data (using simulateRescueData()) end result singleCellExperiment object simulated data individual cell-type. want data several cell types, can re-run process, preferably using simulation parameters estimated data cell type(s) interest. Throughout following example use gene expression data recruited airspace macrophage cells bronchoalveolar lavage samples samples collected healthy adults. data subset contain gene expression 1940 genes 976 cells. Data collected five subjects two time points per subject. ’ll begin smaller data set just 40 genes show basic structure package.","code":"## Load necessary packages library(rescueSim) library(SingleCellExperiment)  ## set seed for reproducibility set.seed(24)  ## Load data data(\"RecAM_sce\")  ## Data is held in singleCellExperiment object class(RecAM_sce) #> [1] \"SingleCellExperiment\" #> attr(,\"package\") #> [1] \"SingleCellExperiment\"  ## Data dimensions dim(RecAM_sce) #> [1] 1940  976  ## Cell level metadata head(colData(RecAM_sce)) #> DataFrame with 6 rows and 3 columns #>                       sampleID   subjectID        time #>                    <character> <character> <character> #> ACTCCCAAGTCATTGC_2     sample1    subject1       time0 #> TATTGCTTCCTAGCCT_2     sample1    subject1       time0 #> ACGGGTCTCGTCCTTG_2     sample1    subject1       time0 #> AACGAAACATGGGCAA_2     sample1    subject1       time0 #> GAGACCCCACGGTGTC_2     sample1    subject1       time0 #> GGGAAGTTCTCAACGA_2     sample1    subject1       time0  ## Five subjects unique(RecAM_sce$subjectID) #> [1] \"subject1\" \"subject2\" \"subject3\" \"subject4\" \"subject5\"  ## Ten samples (two per subject) unique(RecAM_sce$sampleID) #>  [1] \"sample1\"  \"sample2\"  \"sample3\"  \"sample4\"  \"sample5\"  \"sample6\"  #>  [7] \"sample7\"  \"sample8\"  \"sample9\"  \"sample10\"  ## Two different time points unique(RecAM_sce$time) #> [1] \"time0\" \"time1\" ## Subset data to 40 genes RecAM_sce_small <- RecAM_sce[1:40, ]"},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimIntroVignette.html","id":"generating-simulation-parameters","dir":"Articles","previous_headings":"","what":"Generating simulation parameters","title":"Intro to rescueSim","text":"Objects class RescueSimParams used hold simulation parameters settings. parameter object can generated using code . can see object contains slots variety parameters empty default. slots represent parameters left hand side figure 1 used simulate data well data properties number time points subjects. table gives details simulation parameters. Individual parameter values can extracted using getRescueSimParam function.","code":"## Create params object myParams <- RescueSimParams()  ## Param object class class(myParams) #> [1] \"RescueSimParams\" #> attr(,\"package\") #> [1] \"rescueSim\"  ## Examine param object contents myParams #> An object of class \"RescueSimParams\" #> Slot \"nTimepoints\": #> numeric(0) #>  #> Slot \"twoGroupDesign\": #> logical(0) #>  #> Slot \"nSubjsPerGroup\": #> numeric(0) #>  #> Slot \"maxCellsPerSamp\": #> numeric(0) #>  #> Slot \"minCellsPerSamp\": #> numeric(0) #>  #> Slot \"logLibMean\": #> numeric(0) #>  #> Slot \"logLibSD\": #> numeric(0) #>  #> Slot \"logLibFacVar\": #> numeric(0) #>  #> Slot \"customLibSizes\": #> numeric(0) #>  #> Slot \"exprsMean\": #> numeric(0) #>  #> Slot \"dispersion\": #> numeric(0) #>  #> Slot \"sampleFacVarMean\": #> numeric(0) #>  #> Slot \"sampleFacVarSD\": #> numeric(0) #>  #> Slot \"subjectFacVarMean\": #> numeric(0) #>  #> Slot \"subjectFacVarSD\": #> numeric(0) #>  #> Slot \"propDE\": #> [1] 0 #>  #> Slot \"deLog2FC\": #> [1] 0 ## Extract nTimepoints parameter getRescueSimParam(myParams, \"nTimepoints\") #> numeric(0)"},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimIntroVignette.html","id":"manually-adding-parameter-values","dir":"Articles","previous_headings":"Generating simulation parameters","what":"Manually adding parameter values","title":"Intro to rescueSim","text":"Parameter values can added manually initially creating parameter object using parameter name(s) argument RescueSimParams function followed desired value(s). parameter object created, values can updated using updateRescueSimParams parameter object list parameters associated values.","code":"## Create parameter object with nTimepoints and nSubjsPerGroup pre-set myParams <- RescueSimParams(nTimepoints = 2, nSubjsPerGroup = 5) getRescueSimParam(myParams, \"nTimepoints\") #> [1] 2 getRescueSimParam(myParams, \"nSubjsPerGroup\") #> [1] 5 ## Update nTimepoints and nSubjsPerGroup myParams <- updateRescueSimParams(   paramObj = myParams,   paramValues = list(     nTimepoints = 3,     nSubjsPerGroup = 10   ) ) getRescueSimParam(myParams, \"nTimepoints\") #> [1] 3 getRescueSimParam(myParams, \"nSubjsPerGroup\") #> [1] 10"},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimIntroVignette.html","id":"estimating-parameter-values-from-empirical-data","dir":"Articles","previous_headings":"Generating simulation parameters","what":"Estimating parameter values from empirical data","title":"Intro to rescueSim","text":"Parameters can estimated empirical data sets using estRescueSimParams function. Users provide data set form SingleCellExperiment object counts matrix counts slot sample, subject, time point, group meta data (applicable) colData. table outlines function arguments. example shows can simulate data set using subsetted recruited macrophage data. estimate parameters data empirical data single group, providing paramObj orgroupVariable unnecessary. Using genes differentially expressed across time points may lead inaccurate estimates inaccurate estimates subject sample variance parameters (sampleFacVarMean, sampleFacVarSD, subjectFacVarMean, subjectFacVarSD). recruited macrophage data set includes genes appeared invariant across time points. data sets differential expression believed present, rough list invariant genes can identified using differential expression methods edgeR DESeq2 invariant genes can passed nonDEGs argument. want manually set parameters estimating others, RescueSimParams object blank slots parameters like estimated can provided. parameters already values RescueSimParams object estimated. particularly useful using single-sample single-time point empirical data. example data can simulated using single-time point empirical data manually setting parameters. parameters estimated data except parameters specified creating RescueSimParams object. propDE deLog2FC manually set, set 0 (differential expression).","code":"## Estimate all parameters from the data myParams_estimated <- estRescueSimParams(   sce = RecAM_sce_small, paramObj = NULL,   sampleVariable = \"sampleID\",   subjectVariable = \"subjectID\",   timepointVariable = \"time\",   groupVariable = NULL, nonDEGs = NULL,   cellParamsByCondition = F )  myParams_estimated #> An object of class \"RescueSimParams\" #> Slot \"nTimepoints\": #> [1] 2 #>  #> Slot \"twoGroupDesign\": #> [1] FALSE #>  #> Slot \"nSubjsPerGroup\": #> [1] 5 #>  #> Slot \"maxCellsPerSamp\": #> [1] 136 #>  #> Slot \"minCellsPerSamp\": #> [1] 67 #>  #> Slot \"logLibMean\": #> [1] 3.178947 #>  #> Slot \"logLibSD\": #> [1] 0.522717 #>  #> Slot \"logLibFacVar\": #> [1] 0.004475137 #>  #> Slot \"customLibSizes\": #> numeric(0) #>  #> Slot \"exprsMean\": #>       NOC2L      SCNN1D  AL391244.3  AL645728.1  AL691432.2        NADK  #> 0.572778264 0.008741053 0.009527545 0.071148282 0.072171575 0.980568794  #>        GNB1      LRRC47        DFFB    C1orf174      RNF207   CAMTA1-DT  #> 4.626133728 0.388941905 0.093361548 0.494518440 0.003207091 0.001810623  #>      SLC2A5  AL928921.2     TMEM201  PIK3CD-AS2    CTNNBIP1      UBIAD1  #> 0.015460749 0.020178445 0.052752156 0.008627416 0.535365356 0.319103416  #>        MFN2    SLC25A34      UQCRHL      ZBTB17    ARHGEF19      FBXO42  #> 0.510133962 0.039608167 0.030590020 0.115291183 0.015493547 0.599248311  #>   ARHGEF10L  AL035413.1        EMC1       CAPZB       TMCO4       PINK1  #> 1.497391194 0.011564381 0.443020738 4.303634967 0.233431917 0.579322545  #>      HNRNPR      ZNF436         ID3        ELOA      LYPLA2       FUCA1  #> 3.324729001 0.049855385 1.503006201 0.722096065 0.623905753 2.399000540  #>      SRSF10       SRRM1         RHD     LDLRAP1  #> 2.088398063 5.044819599 0.004161722 0.134532354  #>  #> Slot \"dispersion\": #>        NOC2L       SCNN1D   AL391244.3   AL645728.1   AL691432.2         NADK  #> 9.765625e-05 1.024000e+02 9.765625e-05 1.276298e+01 9.765625e-05 1.835820e-01  #>         GNB1       LRRC47         DFFB     C1orf174       RNF207    CAMTA1-DT  #> 1.047582e-01 9.765625e-05 2.531921e+00 9.765625e-05 4.125051e+01 9.765625e-05  #>       SLC2A5   AL928921.2      TMEM201   PIK3CD-AS2     CTNNBIP1       UBIAD1  #> 9.765625e-05 9.765625e-05 5.431577e+00 1.024000e+02 9.765625e-05 9.765625e-05  #>         MFN2     SLC25A34       UQCRHL       ZBTB17     ARHGEF19       FBXO42  #> 3.701863e-01 1.611721e+01 9.765625e-05 9.765625e-05 9.765625e-05 2.641163e-01  #>    ARHGEF10L   AL035413.1         EMC1        CAPZB        TMCO4        PINK1  #> 9.765625e-05 9.765625e-05 9.765625e-05 9.373476e-02 5.244223e-01 2.413057e-01  #>       HNRNPR       ZNF436          ID3         ELOA       LYPLA2        FUCA1  #> 8.447181e-02 9.765625e-05 2.564846e+00 9.765625e-05 9.765625e-05 2.701521e-01  #>       SRSF10        SRRM1          RHD      LDLRAP1  #> 1.251372e-01 1.211732e-01 9.765625e-05 2.088006e-01  #>  #> Slot \"sampleFacVarMean\": #> [1] -4.105898 #>  #> Slot \"sampleFacVarSD\": #> [1] 0.6932764 #>  #> Slot \"subjectFacVarMean\": #> [1] -3.853583 #>  #> Slot \"subjectFacVarSD\": #> [1] 0.991917 #>  #> Slot \"propDE\": #> [1] 0 #>  #> Slot \"deLog2FC\": #> [1] 0 ## Subset the data to a single time point RecAM_sce_single_time <- RecAM_sce_small[, RecAM_sce_small$time == \"time0\"]  ## Create a params object with necessary parameters filled myParams <- RescueSimParams(subjectFacVarMean = -4, subjectFacVarSD = 1, nSubjsPerGroup = 5)  ## Estimate remaining parameters from the data myParams_estimated <- estRescueSimParams(   sce = RecAM_sce_single_time,   paramObj = myParams,   sampleVariable = \"sampleID\" ) myParams_estimated #> An object of class \"RescueSimParams\" #> Slot \"nTimepoints\": #> [1] 1 #>  #> Slot \"twoGroupDesign\": #> [1] FALSE #>  #> Slot \"nSubjsPerGroup\": #> [1] 5 #>  #> Slot \"maxCellsPerSamp\": #> [1] 138 #>  #> Slot \"minCellsPerSamp\": #> [1] 74 #>  #> Slot \"logLibMean\": #> [1] 3.121858 #>  #> Slot \"logLibSD\": #> [1] 0.5599401 #>  #> Slot \"logLibFacVar\": #> [1] 0.004115623 #>  #> Slot \"customLibSizes\": #> numeric(0) #>  #> Slot \"exprsMean\": #>       NOC2L      SCNN1D  AL391244.3  AL645728.1  AL691432.2        NADK  #> 0.686218318 0.006215246 0.007633068 0.070614455 0.100593001 0.792710639  #>        GNB1      LRRC47        DFFB    C1orf174      RNF207   CAMTA1-DT  #> 4.288298440 0.383281997 0.108778810 0.488922467 0.001990346 0.001987183  #>      SLC2A5  AL928921.2     TMEM201  PIK3CD-AS2    CTNNBIP1      UBIAD1  #> 0.014821378 0.011496427 0.043983228 0.004346802 0.485034231 0.240097930  #>        MFN2    SLC25A34      UQCRHL      ZBTB17    ARHGEF19      FBXO42  #> 0.415416269 0.054199585 0.051226562 0.111460850 0.017990270 0.610301394  #>   ARHGEF10L  AL035413.1        EMC1       CAPZB       TMCO4       PINK1  #> 1.180161571 0.014261528 0.441152623 4.349938165 0.259431948 0.580329663  #>      HNRNPR      ZNF436         ID3        ELOA      LYPLA2       FUCA1  #> 2.831232806 0.071010670 1.289427830 0.662611225 0.736945307 2.088311882  #>      SRSF10       SRRM1         RHD     LDLRAP1  #> 2.023526287 5.106106212 0.006105399 0.128508501  #>  #> Slot \"dispersion\": #>        NOC2L       SCNN1D   AL391244.3   AL645728.1   AL691432.2         NADK  #> 1.146676e-01 1.024000e+02 9.765625e-05 1.320901e+01 9.765625e-05 2.842339e-01  #>         GNB1       LRRC47         DFFB     C1orf174       RNF207    CAMTA1-DT  #> 1.295745e-01 9.765625e-05 2.178611e+00 9.765625e-05 9.765625e-05 9.765625e-05  #>       SLC2A5   AL928921.2      TMEM201   PIK3CD-AS2     CTNNBIP1       UBIAD1  #> 9.765625e-05 9.765625e-05 6.837777e+00 1.024000e+02 9.765625e-05 9.765625e-05  #>         MFN2     SLC25A34       UQCRHL       ZBTB17     ARHGEF19       FBXO42  #> 3.073198e-01 1.592748e+01 9.765625e-05 9.765625e-05 9.765625e-05 3.012721e-01  #>    ARHGEF10L   AL035413.1         EMC1        CAPZB        TMCO4        PINK1  #> 9.765625e-05 9.765625e-05 9.765625e-05 1.343976e-01 4.026675e-01 2.689336e-01  #>       HNRNPR       ZNF436          ID3         ELOA       LYPLA2        FUCA1  #> 8.084418e-02 9.765625e-05 2.418655e+00 9.765625e-05 9.765625e-05 3.516693e-01  #>       SRSF10        SRRM1          RHD      LDLRAP1  #> 1.393887e-01 1.060177e-01 9.765625e-05 4.842573e-02  #>  #> Slot \"sampleFacVarMean\": #> [1] -3.846468 #>  #> Slot \"sampleFacVarSD\": #> [1] 0.7435008 #>  #> Slot \"subjectFacVarMean\": #> [1] -4 #>  #> Slot \"subjectFacVarSD\": #> [1] 1 #>  #> Slot \"propDE\": #> [1] 0 #>  #> Slot \"deLog2FC\": #> [1] 0 getRescueSimParam(myParams_estimated, \"propDE\") #> [1] 0 getRescueSimParam(myParams_estimated, \"deLog2FC\") #> [1] 0"},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimIntroVignette.html","id":"simulating-data","dir":"Articles","previous_headings":"","what":"Simulating Data","title":"Intro to rescueSim","text":"setting simulation parameters, simRescueData function can used simulate data set. function takes argument RescueSimParams object. returns SingleCellExperiment. matrix counts held counts slot. rownames (genes) take names exprsMean vector provided. exprsMean estimated empirical data, gene names empirical data. Cell level meta data held object colData. Log-fold change values gene held object rowData.","code":"## Simulate data mySim <- simRescueData(myParams_estimated)  ## Look at class of simulated data class(mySim) #> [1] \"SingleCellExperiment\" #> attr(,\"package\") #> [1] \"SingleCellExperiment\" counts(mySim)[1:5, 1:5] #>            cell_1 cell_2 cell_3 cell_4 cell_5 #> NOC2L           0      0      2      0      1 #> SCNN1D          0      0      0      0      0 #> AL391244.3      0      0      0      0      0 #> AL645728.1      0      0      0      0      0 #> AL691432.2      0      0      0      0      0 head(colData(mySim)) #> DataFrame with 6 rows and 4 columns #>           sampleID   subjectID        time       group #>        <character> <character> <character> <character> #> cell_1     sample1    subject1       time0      group0 #> cell_2     sample1    subject1       time0      group0 #> cell_3     sample1    subject1       time0      group0 #> cell_4     sample1    subject1       time0      group0 #> cell_5     sample1    subject1       time0      group0 #> cell_6     sample1    subject1       time0      group0 head(rowData(mySim)) #> DataFrame with 6 rows and 0 columns"},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimIntroVignette.html","id":"adjusting-specific-parameter-values","dir":"Articles","previous_headings":"","what":"Adjusting Specific Parameter Values","title":"Intro to rescueSim","text":"Now ’ll give detail effect adjusting parameter values. first estimate parameters using unfiltered recruited macrophage data. use resulting object throughout remainder document.","code":"## Estimate parameters using full RecAM_sce object myParams <- estRescueSimParams(RecAM_sce,   sampleVariable = \"sampleID\",   subjectVariable = \"subjectID\",   timepointVariable = \"time\",   groupVariable = NULL, nonDEGs = NULL,   cellParamsByCondition = FALSE )"},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimIntroVignette.html","id":"sample-size-adjustments","dir":"Articles","previous_headings":"Adjusting Specific Parameter Values","what":"Sample Size Adjustments","title":"Intro to rescueSim","text":"question likely arise repeated measures scRNA-seq analysis study planning sample size impact results. experiments, different aspects sample size, can controlled using rescueSim simulation method: Number time points (samples) per subject (nTimepoints) Number subjects (nSubjsPerGroup) Number cells per sample (maxCellsPerSamp, maxCellsPerSamp) situation sometimes arises scRNA-seq experiments one number cells particular cell type sample impacted group variable (.e. treatment control) time variable (ex. pre post-treatment). Thus, allow option specify estimate one maxCellsPerSampand maxCellsPerSamp parameter used samples, one maxCellsPerSampand maxCellsPerSamp parameter condition (group/time), one maxCellsPerSampand maxCellsPerSamp parameter individual sample. example estimating manually specifying maxCellsPerSampand maxCellsPerSamp parameters two time points. user can estimate individual parameters condition using cellParamsByCondition=TRUE function argument. Alternatively, user can manually set parameters vector values equal number conditions. simulate data, can see number cells time0 samples 50 100 number cells time1 samples 250 500.","code":"## Set cell parameter values to numeric 0 so we can re-estimate myParams_cellsByCondition <- updateRescueSimParams(   myParams,   list(     maxCellsPerSamp = numeric(0),     minCellsPerSamp = numeric(0)   ) ) ## Estimate with cellParamsByCondition = T myParams_cellsByCondition <- estRescueSimParams(RecAM_sce,   myParams_cellsByCondition,   sampleVariable = \"sampleID\",   subjectVariable = \"subjectID\",   timepointVariable = \"time\",   cellParamsByCondition = T )  ## Now cell parameters are estimated separately by time point getRescueSimParam(myParams_cellsByCondition, \"maxCellsPerSamp\") #> time0 time1  #>   138   104 getRescueSimParam(myParams_cellsByCondition, \"minCellsPerSamp\") #> time0 time1  #>    74    67 ## Manually setting parameters myParams_cellsByCondition <- updateRescueSimParams(   myParams,   list(     maxCellsPerSamp = c(100, 500),     minCellsPerSamp = c(50, 250)   ) ) ## Simulate data simDat <- simRescueData(myParams_cellsByCondition)  ## Look at number of cells per sample table(simDat$sampleID, simDat$time) #>            #>            time0 time1 #>   sample1     69     0 #>   sample10     0   368 #>   sample2     75     0 #>   sample3     72     0 #>   sample4     72     0 #>   sample5     77     0 #>   sample6      0   361 #>   sample7      0   310 #>   sample8      0   355 #>   sample9      0   257"},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimIntroVignette.html","id":"library-size-adjustments","dir":"Articles","previous_headings":"Adjusting Specific Parameter Values","what":"Library Size Adjustments","title":"Intro to rescueSim","text":"library sizes, number counts per cell, can adjusted two ways. default, library sizes drawn log-normal distribution logLibMean logLibSD control overall mean variability library sizes across cells. Alternatively, users can supply specific library sizes customLibSizes parameter library sizes drawn directly rather simulated distribution. either case, logLibFacVar introduces variation library size distributions samples, mimicking technical effects batch variation. logLibMean parameter controls overall average library size (log scale). example using relatively large vs. small value logLibMean.  logLibSD parameter controls amount variation library size across cells. example using relatively large vs. small value logLibSD.  Alternatively, users can provide custom library sizes via customLibSizes parameter. specified, values used directly (sampled replacement) instead drawing library sizes log-normal distribution. can useful cases log-normal distribution reflect empirical distribution library sizes. illustrate create custom library sizes based empirical distribution identifying sample data set mean library size closest overall mean across samples, use sample’s library sizes simulation.  multi-sample scRNA-Seq data, often differences distributions library size across samples caused technical batch effects since cells individual samples sequenced together batch. account , draw multiplicative factors, centered around one, multiply logLibMean mean used draw library sizes varies sample. parameter logLibFacVar represents estimated variance multiplicative factors. value 0 means variance library size means, thus distribution library sizes approximately sample. Lager values logLibFacVar indicate larger -sample differences library size distribution. example using big small value logLibFacVar affects library size distribution sample.","code":"## Create two parameter objects, one with large logLibMean, one with small logLibMean myParams_bigLogLibMean <- updateRescueSimParams(myParams, list(logLibMean = log(5000)))  myParams_smallLogLibMean <- updateRescueSimParams(myParams, list(logLibMean = log(500)))  ## Simulate data with both scenarios simDat_bigLogLibMean <- simRescueData(myParams_bigLogLibMean) simDat_smallLogLibMean <- simRescueData(myParams_smallLogLibMean)  ## Calculate library sizes by summing up the columns of the count data bigLibSizes <- data.frame(   libSizes = colSums(counts(simDat_bigLogLibMean)),   type = \"logLibMean = log(5,000)\" ) smallLibSizes <- data.frame(   libSizes = colSums(counts(simDat_smallLogLibMean)),   type = \"logLibMean = log(500)\" ) libSizes <- rbind(bigLibSizes, smallLibSizes)   ## Output boxplot comparing library sizes boxplot(log(libSizes) ~ type, data = libSizes, xlab = NULL, ylab = \"log(Library Size)\") ## Create two parameter objects, one with large logLibSD, one with small logLibSD myParams_bigLogLibSD <- updateRescueSimParams(myParams, list(logLibSD = log(2)))  myParams_smallLogLibSD <- updateRescueSimParams(myParams, list(logLibSD = log(1.25)))  ## Simulate data with both scenarios simDat_bigLogLibSD <- simRescueData(myParams_bigLogLibSD) simDat_smallLogLibSD <- simRescueData(myParams_smallLogLibSD)  ## Calculate library sizes by summing up the columns of the count data bigLibSizeSD <- data.frame(   libSizes = colSums(counts(simDat_bigLogLibSD)),   type = \"logLibSD = log(2)\" ) smallLibSizeSD <- data.frame(   libSizes = colSums(counts(simDat_smallLogLibSD)),   type = \"logLibSD = log(1.25)\" ) libSizes <- rbind(bigLibSizeSD, smallLibSizeSD)   ## Output boxplot comparing library sizes boxplot(log(libSizes) ~ type, data = libSizes, xlab = NULL, ylab = \"log(Library Size)\") ## Calculate library sizes for each cell empLibSizes <- data.frame(   libSizes = colSums(counts(RecAM_sce)),   sample = RecAM_sce$sampleID,   type=\"Empirical\" )  ## Calculate mean library size for each sample samples <- unique(empLibSizes$sample) lib_size_means <- sapply(samples, function(s) {   mean(empLibSizes$libSizes[empLibSizes$sample == s]) })  ## Find the sample closest to the overall mean overall_mean <- mean(lib_size_means) idx_min <- which.min(abs(lib_size_means - overall_mean)) samp_min <- samples[idx_min]  ## Get custom library sizes from that sample customLibSizes <- empLibSizes$libSizes[empLibSizes$sample == samp_min]  ## Update parameters and simulate myParams_customLib <- updateRescueSimParams(myParams, list(customLibSizes = customLibSizes)) simDat_customLib <- simRescueData(myParams_customLib)  ## Compare empirical and simulated library sizes  simLibSizes <- data.frame(   libSizes = colSums(counts(simDat_customLib)),   sample=simDat_customLib$sampleID,   type = \"Simulated (customLibSizes)\" )  libSizes <- rbind(empLibSizes, simLibSizes)  ## Boxplot comparing library sizes boxplot(log(libSizes) ~ type,         data=libSizes,         ylab = \"log(Library Size)\", xlab = NULL) ## Create two parameter objects, one with large logLibFacVar, one with small logLibFacVar myParams_smalllogLibFacVar <- updateRescueSimParams(myParams, list(logLibFacVar = 0))  myParams_biglogLibFacVar <- updateRescueSimParams(myParams, list(logLibFacVar = .005))    ## Simulate data with both scenarios simDat_smalllogLibFacVar <- simRescueData(myParams_smalllogLibFacVar) simDat_biglogLibFacVar <- simRescueData(myParams_biglogLibFacVar)  ## Calculate library sizes by summing up the columns of the count data smalllogLibFacVar <- data.frame(   libSizes = colSums(counts(simDat_smalllogLibFacVar)),   type = \"Small logLibFacVar\",   sample = simDat_smalllogLibFacVar$sampleID ) biglogLibFacVar <- data.frame(   libSizes = colSums(counts(simDat_biglogLibFacVar)),   type = \"Big logLibFacVar\",   sample = simDat_biglogLibFacVar$sampleID )    ## Output boxplot comparing library sizes by samples for both scenarios boxplot(log(libSizes) ~ sample,   data = smalllogLibFacVar, main = \"logLibFacVar = 0\",   xlab = NULL, ylab = \"log(Library Size)\" ) boxplot(log(libSizes) ~ sample,   data = biglogLibFacVar, main = \"logLibFacVar = .005\",   xlab = NULL, ylab = \"log(Library Size)\" )"},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimIntroVignette.html","id":"between-subjectsample-variation","dir":"Articles","previous_headings":"Adjusting Specific Parameter Values","what":"Between Subject/Sample Variation","title":"Intro to rescueSim","text":"simulate -sample -subject variation, rescueSim uses gene specific sample- subject- level multiplicative factors multiplied mean gene expression gene, resulting value used later simulation (see Figure 1, step 1). multiplicative factors drawn distribution mean 1. variance distribution randomly generated. parameters sampleFacVarMean sampleFacVarSD represent mean standard deviation (log scale) variances sample-level multiplicative factors subjectFacVarMean subjectFacVarSD parameters sampling distribution subject-level variances. larger variances result larger -sample -subject variation, increasing sampleFacVarMean subjectFacVarMean also leads -sample -subject variation. Increasing values sampleFacVarSD subjectFacVarSD lead variation amount -sample -subject variation across genes. Typically, interested adjusting overall amount -sample -subject variation, concentrate effect changing sampleFacVarMean subjectFacVarMean parameters. Using low value (-10) sampleFacVarMean leads little -sample variation, see TSNE plot samples don’t cluster together  increase value -3, samples cluster tightly sample.  true look effect increasing subjectFacVarMean subject-level clustering.","code":"## Set sampleFacVarMean to -10 myParams_smallsampleFacVarMean <- updateRescueSimParams(myParams, list(sampleFacVarMean = -10))  ## Simulate data simDat_smallsampleFacVarMean <- simRescueData(myParams_smallsampleFacVarMean)  ## Log-normalize counts to run TSNE simDat_smallsampleFacVarMean <- scater::logNormCounts(simDat_smallsampleFacVarMean)  ## Run and plot TSNE simDat_smallsampleFacVarMean <- scater::runTSNE(simDat_smallsampleFacVarMean)  scater::plotTSNE(simDat_smallsampleFacVarMean, colour_by = \"sampleID\") ## Set sampleFacVarMean to -3 myParams_bigsampleFacVarMean <- updateRescueSimParams(myParams, list(sampleFacVarMean = -3))  ## Simulate data simDat_bigsampleFacVarMean <- simRescueData(myParams_bigsampleFacVarMean)  ## Log-normalize counts to run TSNE simDat_bigsampleFacVarMean <- scater::logNormCounts(simDat_bigsampleFacVarMean)  ## Run and plot TSNE simDat_bigsampleFacVarMean <- scater::runTSNE(simDat_bigsampleFacVarMean)  scater::plotTSNE(simDat_bigsampleFacVarMean, colour_by = \"sampleID\") ## Set subjectFacVarMean to -3 myParams_smallsubjectFacVarMean <- updateRescueSimParams(myParams, list(subjectFacVarMean = -10))  ## Simulate data simDat_smallsubjectFacVarMean <- simRescueData(myParams_smallsubjectFacVarMean)  ## Log-normalize counts to run TSNE simDat_smallsubjectFacVarMean <- scater::logNormCounts(simDat_smallsubjectFacVarMean)  ## Run and plot TSNE simDat_smallsubjectFacVarMean <- scater::runTSNE(simDat_smallsubjectFacVarMean)  scater::plotTSNE(simDat_smallsubjectFacVarMean, colour_by = \"subjectID\") ## Set subjectFacVarMean to -3 myParams_bigsubjectFacVarMean <- updateRescueSimParams(myParams, list(subjectFacVarMean = -3))  ## Simulate data simDat_bigsubjectFacVarMean <- simRescueData(myParams_bigsubjectFacVarMean)  ## Log-normalize counts to run TSNE simDat_bigsubjectFacVarMean <- scater::logNormCounts(simDat_bigsubjectFacVarMean)  ## Run and plot TSNE simDat_bigsubjectFacVarMean <- scater::runTSNE(simDat_bigsubjectFacVarMean)  scater::plotTSNE(simDat_bigsubjectFacVarMean, colour_by = \"subjectID\")"},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimIntroVignette.html","id":"differential-expression","dir":"Articles","previous_headings":"Adjusting Specific Parameter Values","what":"Differential Expression","title":"Intro to rescueSim","text":"rescueSim allows user simulate differential expression time points/groups using two parameters must manually set user: propDE controls proportion genes differentially expressed, deLog2FC controls log2_2 fold change values differentially expressed genes. user can specify single positive log2_2 fold change value deLog2FC, case differential expression evenly split - -regulation proportion genes specified propDE. Alternatively, vector positive /negative values can provided, log2_2 fold change values differentially expressed genes drawn. cases, simulating multiple time points, log2_2 fold change represents change first (time0) last time point, gene expression changes simulated linearly across intermediate time points. two-group, multi-time point simulation, log2_2 fold change represents difference time0_group0 final time point group1 (timeN_group1), differential expression across time points within group0 linear change across time within group1. Alternatively, users can provide named list vectors deLogFC element list corresponds fold change values time point (time point-group combination) relative baseline (time0, group0, time0_group0). enables simulation non-linear custom differential expression patterns across time groups. using list, propDE parameter used vector length equal number genes data set. baseline condition included list. show using TSNE plot scater package differential expression impacts cell clustering. simulate differential expression, cells time points cluster together.  simulate 20% genes differentially expressed time points ±1\\pm1 log2_2 fold change, cells different time points cluster separately.  simulate three time points, cells cluster sequentially time point since rescueSim simulates linear differential expression across time.  simulate 2-group, 2-time point data set, cells final time point last group, simulated differentially expressed relative groups/times, cluster separately rest cells.  Finally, can simulate differential expression using manually set log2_2 fold change values time point condition, allowing non-linear changes across time. done providing deLog2FC list named vectors, element list corresponds condition (excluding reference: time0, group0 time0_group0). vector specifies log2_2 fold change values gene condition relative reference group. , show example simulating three time points, specify log2_2 fold changes one intermediate time point larger log_22 fold changes final time point. results non-linear gene expression changes across time. case, can see time0 time1 much closer together time2.","code":"## Estimate data with no differential expression (default) simDat_noDE <- simRescueData(myParams)  ## Log-normalize counts to run TSNE simDat_noDE <- scater::logNormCounts(simDat_noDE)  ## Run and plot TSNE simDat_noDE <- scater::runTSNE(simDat_noDE)  scater::plotTSNE(simDat_noDE, colour_by = \"time\") ## Manually changing DE Params myParams_de_2timepoints <- updateRescueSimParams(myParams, list(   propDE = .2, deLog2FC = 1 ))  ## Estimate data with no differential expression (default) simDat_de_2timepoints <- simRescueData(myParams_de_2timepoints)  ## Log-normalize counts to run TSNE simDat_de_2timepoints <- scater::logNormCounts(simDat_de_2timepoints)  ## Run and plot TSNE simDat_de_2timepoints <- scater::runTSNE(simDat_de_2timepoints)  scater::plotTSNE(simDat_de_2timepoints, colour_by = \"time\") ## Manually changing DE Params myParams_de_3timepoints <- updateRescueSimParams(myParams, list(   propDE = .2, deLog2FC = 1,   nTimepoints = 3 ))  ## Estimate data with no differential expression (default) simDat_de_3timepoints <- simRescueData(myParams_de_3timepoints)  ## Log-normalize counts to run TSNE simDat_de_3timepoints <- scater::logNormCounts(simDat_de_3timepoints)  ## Run and plot TSNE simDat_de_3timepoints <- scater::runTSNE(simDat_de_3timepoints)  scater::plotTSNE(simDat_de_3timepoints, colour_by = \"time\") ## Manually changing DE Params myParams_de_2groups <- updateRescueSimParams(myParams, list(   propDE = .2, deLog2FC = 1,   twoGroupDesign = T,   nTimepoints = 2 ))  ## Estimate data with no differential expression (default) simDat_de_2groups <- simRescueData(myParams_de_2groups)  ## Make a variable combining group and time simDat_de_2groups$group_time <- paste(simDat_de_2groups$group,   simDat_de_2groups$time,   sep = \"_\" )  ## Log-normalize counts to run TSNE simDat_de_2groups <- scater::logNormCounts(simDat_de_2groups)  ## Run and plot TSNE simDat_de_2groups <- scater::runTSNE(simDat_de_2groups)  scater::plotTSNE(simDat_de_2groups, colour_by = \"group_time\") ## For the 2nd time point, simulate +/- 1 log2FC in 20% of genes time1_log2FC<-sample(c(-1, 0, 1), nrow(RecAM_sce), replace=T, prob = c(.1, .8, .1))  ## For final time point, multiply log2FC by 3 to get +/- 3 log2FC in 20% of genes time2_log2FC <- time1_log2FC*3  myParams_nonLinearDE <- updateRescueSimParams(myParams, list(   deLog2FC = list(time1=time1_log2FC, time2=time2_log2FC),   nTimepoints = 3 ))  simDat_nonLinearDE <- simRescueData(myParams_nonLinearDE)  # Log-normalize counts and run TSNE simDat_nonLinearDE <- scater::logNormCounts(simDat_nonLinearDE) simDat_nonLinearDE <- scater::runTSNE(simDat_nonLinearDE) # Plot TSNE colored by time point to visualize clustering scater::plotTSNE(simDat_nonLinearDE, colour_by = \"time\")"},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimIntroVignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Intro to rescueSim","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] SingleCellExperiment_1.30.1 SummarizedExperiment_1.38.1 #>  [3] Biobase_2.68.0              GenomicRanges_1.60.0        #>  [5] GenomeInfoDb_1.44.3         IRanges_2.42.0              #>  [7] S4Vectors_0.46.0            BiocGenerics_0.54.0         #>  [9] generics_0.1.4              MatrixGenerics_1.20.0       #> [11] matrixStats_1.5.0           rescueSim_0.99.0            #>  #> loaded via a namespace (and not attached): #>  [1] MAST_1.33.0             gridExtra_2.3           rlang_1.1.6             #>  [4] magrittr_2.0.4          scater_1.36.0           compiler_4.5.1          #>  [7] systemfonts_1.3.1       vctrs_0.6.5             reshape2_1.4.4          #> [10] stringr_1.5.2           pkgconfig_2.0.3         crayon_1.5.3            #> [13] fastmap_1.2.0           backports_1.5.0         XVector_0.48.0          #> [16] scuttle_1.18.0          labeling_0.4.3          rmarkdown_2.30          #> [19] UCSC.utils_1.4.0        ggbeeswarm_0.7.2        ragg_1.5.0              #> [22] xfun_0.53               bluster_1.18.0          cachem_1.1.0            #> [25] beachmat_2.24.0         jsonlite_2.0.0          DelayedArray_0.34.1     #> [28] BiocParallel_1.42.2     irlba_2.3.5.1           parallel_4.5.1          #> [31] cluster_2.1.8.1         R6_2.6.1                bslib_0.9.0             #> [34] stringi_1.8.7           RColorBrewer_1.1-3      limma_3.64.3            #> [37] jquerylib_0.1.4         Rcpp_1.1.0              knitr_1.50              #> [40] Matrix_1.7-3            igraph_2.1.4            tidyselect_1.2.1        #> [43] abind_1.4-8             yaml_2.3.10             viridis_0.6.5           #> [46] codetools_0.2-20        lattice_0.22-7          tibble_3.3.0            #> [49] plyr_1.8.9              withr_3.0.2             S7_0.2.0                #> [52] evaluate_1.0.5          Rtsne_0.17              desc_1.4.3              #> [55] pillar_1.11.1           checkmate_2.3.3         ggplot2_4.0.0           #> [58] scales_1.4.0            gtools_3.9.5            glue_1.8.0              #> [61] metapod_1.16.0          tools_4.5.1             BiocNeighbors_2.2.0     #> [64] data.table_1.17.8       ScaledMatrix_1.16.0     locfit_1.5-9.12         #> [67] fs_1.6.6                scran_1.36.0            grid_4.5.1              #> [70] edgeR_4.6.3             GenomeInfoDbData_1.2.14 beeswarm_0.4.0          #> [73] BiocSingular_1.24.0     vipor_0.4.7             cli_3.6.5               #> [76] rsvd_1.0.5              textshaping_1.0.3       S4Arrays_1.8.1          #> [79] viridisLite_0.4.2       dplyr_1.1.4             gtable_0.3.6            #> [82] sass_0.4.10             digest_0.6.37           SparseArray_1.8.1       #> [85] ggrepel_0.9.6           dqrng_0.4.1             farver_2.1.2            #> [88] htmltools_0.5.8.1       pkgdown_2.1.3           lifecycle_1.0.4         #> [91] httr_1.4.7              statmod_1.5.0"},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimPowerVignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Power Analysis with rescueSim","text":"One application rescueSim evaluate power detect within-cell type differential gene expression paired longitudinal scRNA-sequencing studies, well complex repeated measures designs. data inherently high-dimensional hierarchical, multiple sources variability, making standard closed-form power sample size calculations infeasible. Instead, simulating data assessing power across different design scenarios (e.g., varying numbers samples cells) offers practical informative approach study planning. vignette focuses using rescueSim perform power analysis detecting differential gene expression longitudinal repeated-measures single-cell RNA-seq studies. overview rescueSim simulation framework basic usage, see Intro rescueSim vignette.","code":""},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimPowerVignette.html","id":"running-a-power-analysis","dir":"Articles","previous_headings":"","what":"Running a Power Analysis","title":"Power Analysis with rescueSim","text":"Power can evaluated using runRescueSimPower function. function simulates multiple data sets different user-defined scenarios, applies user-supplied differential expression (DE) method, calculates power proportion true DE genes correctly identified specified significance threshold. table outlines key function arguments. function returns data.frame containing power (FDR requested) simulation along scenario settings comparison conditions.","code":""},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimPowerVignette.html","id":"setting-up-the-data","dir":"Articles","previous_headings":"","what":"Setting up the data","title":"Power Analysis with rescueSim","text":"example, use data set included rescueSim package. data set contains gene expression data recruited airspace macrophage (RAM) cells bronchoalveolar lavage samples collected healthy adults. Data collected five subjects two time points per subject. data set subset include 1,940 genes 970 cells. genes included assessed invariant across time points. reduce computational cost, particularly differential expression analysis example uses MAST random effects, computationally intensive, filter data include 100 genes. Note MAST offer parallelization option can speed analysis. data set small, power estimates example meaningful study planning/method benchmarking. Rather, example used solely illustrate package functionality.","code":"## Load packages library(rescueSim) library(SingleCellExperiment)  ## Load data data(\"RecAM_sce\")  ## Set seed and randomly select 100 cells set.seed(24) RecAM_sce <- RecAM_sce[sample(1:nrow(RecAM_sce), 100),]  ## Estimate params from filtered data simParams<-estRescueSimParams(RecAM_sce, sampleVariable = \"sampleID\",                               subjectVariable = \"subjectID\",                                timepointVariable = \"time\")"},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimPowerVignette.html","id":"differential-expression-function-for-the-power-analysis","dir":"Articles","previous_headings":"Setting up the data","what":"Differential expression function for the power analysis","title":"Power Analysis with rescueSim","text":"run power analysis using runRescueSimPower, must supply custom function performs differential expression (DE) analysis simulated data set. function return data frame containing least: gene: gene identifier padj: adjusted p-value (e.g. FDR adjustment) design allows users select DE method appropriate study design. example, use MAST random effects model hierarchical structure paired scRNA-seq data. MAST allows inclusion random effects sample subject, making reasonable choice accounting correlation data. However, important note performance MAST (DE methods) paired/longitudinal single-cell data fully evaluated. results power analysis interpreted limitation mind. custom DE function use. function filters data include genes expression least 10%\\% cells, applies log2(CPM+1) normalization, computes cellular detection rate, fits MAST model random effects sample subject, returns table adjusted p-values time effect.","code":"deFun <- function(sce) {     # Include only genes expressed in at least 10% of cells     sce <- sce[rowMeans(counts(sce) != 0) >= 0.1, ]          # Log2(CPM + 1) normalization     normcounts(sce) <- apply(counts(sce), 2, function(x) {         log2((1e6 * x / sum(x)) + 1)     })          # Convert to SingleCellAssay     sca <- suppressMessages(MAST::FromMatrix(as.matrix(normcounts(sce)),                                               colData(sce)))          # Calculate cellular detection rate     cdr <- colSums(SummarizedExperiment::assay(sca) > 0)     colData(sca)$cngeneson <- scale(cdr)          # Fit model     suppressMessages(         suppressWarnings({             zlmCond <- MAST::zlm(                 form = ~ cngeneson + time + (1 | sampleID) + (1 | subjectID),                 sca,                 method = \"glmer\",                 ebayes = FALSE,                 strictConvergence = TRUE, silent = T             )}     )     )          # Summarize LRT for time     suppressMessages(         suppressWarnings({             raw_res <- MAST::summary(zlmCond, doLRT = \"timetime1\")         })     )     sum_tab <- data.frame(raw_res$datatable)          # Keep only the H (hurdle) component rows     sum_tab <- sum_tab[sum_tab$component == \"H\", ]          # Add padj and gene columns     sum_tab$padj <- p.adjust(sum_tab$`Pr..Chisq.`, method = \"BH\")     sum_tab$gene <- sum_tab$primerid          return(sum_tab) }"},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimPowerVignette.html","id":"running-the-power-analysis","dir":"Articles","previous_headings":"","what":"Running the power analysis","title":"Power Analysis with rescueSim","text":"run runRescueSimPower estimate power across couple illustrative scenarios. simulate data sets 20%\\% genes exhibit differential expression two time points log2_2 fold-change ±0.5\\pm0.5. evaluate two scenarios: Scenario 1: 3 subjects, 200 cells per sample Scenario 2: 6 subjects, 100 cells per sample simplicity, set minCellsPerSamp maxCellsPerSamp parameters value scenario number cells per sample fixed. practice, simulations like used explore trade-offs sequencing depth subject recruitment. illustration purposes , simulate 2 data sets per scenario using small number genes, results produced meaningful used reflect method performance guide study design. goal simply demonstrate runRescueSimPower function can applied. output runRescueSimPower data frame row corresponds one simulated data set, showing scenario settings, simulation number, comparison conditions, power, (requested) FDR. , genes simulations , values example purely illustrative reliable. run full data set simulations, output can summarized power curves visuals explore design trade-offs.","code":"## Update differential expression parameters in parameter object simParams <- updateRescueSimParams(simParams,                                     paramValues = list(propDE=.2, deLog2FC=.5))  ## Define scenarios scenarios <- data.frame(minCellsPerSamp = c(200, 100),                         maxCellsPerSamp = c(200, 100),                         nSubjsPerGroup = c(3, 6))  scenarios #>   minCellsPerSamp maxCellsPerSamp nSubjsPerGroup #> 1             200             200              3 #> 2             100             100              6  ## Set seed for reproducibility and run set.seed(24) power_res=runRescueSimPower(baseParams = simParams, scenarios = scenarios,                              deFunction = deFun, nSim = 2, returnFDR  = F) #> Running scenario 1 of 2 #>   Sim 1 #>   Sim 2 #> Running scenario 2 of 2 #>   Sim 1 #>   Sim 2 #> Warning in runRescueSimPower(baseParams = simParams, scenarios = scenarios, : #> Some padj values are NA and will be removed before calculating power. power_res #>   minCellsPerSamp maxCellsPerSamp nSubjsPerGroup sim condition1 condition2 #> 1             200             200              3   1      time0      time1 #> 2             200             200              3   2      time0      time1 #> 3             100             100              6   1      time0      time1 #> 4             100             100              6   2      time0      time1 #>       power #> 1 0.5555556 #> 2 1.0000000 #> 3 0.4827586 #> 4 0.7000000"},{"path":"https://ewynn610.github.io/rescueSim/articles/rescueSimPowerVignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Power Analysis with rescueSim","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] SingleCellExperiment_1.30.1 SummarizedExperiment_1.38.1 #>  [3] Biobase_2.68.0              GenomicRanges_1.60.0        #>  [5] GenomeInfoDb_1.44.3         IRanges_2.42.0              #>  [7] S4Vectors_0.46.0            BiocGenerics_0.54.0         #>  [9] generics_0.1.4              MatrixGenerics_1.20.0       #> [11] matrixStats_1.5.0           rescueSim_0.99.0            #>  #> loaded via a namespace (and not attached): #>   [1] Rdpack_2.6.4            MAST_1.33.0             gridExtra_2.3           #>   [4] rlang_1.1.6             magrittr_2.0.4          scater_1.36.0           #>   [7] compiler_4.5.1          systemfonts_1.3.1       vctrs_0.6.5             #>  [10] reshape2_1.4.4          stringr_1.5.2           pkgconfig_2.0.3         #>  [13] crayon_1.5.3            fastmap_1.2.0           backports_1.5.0         #>  [16] XVector_0.48.0          scuttle_1.18.0          rmarkdown_2.30          #>  [19] nloptr_2.2.1            UCSC.utils_1.4.0        ggbeeswarm_0.7.2        #>  [22] ragg_1.5.0              xfun_0.53               bluster_1.18.0          #>  [25] cachem_1.1.0            beachmat_2.24.0         jsonlite_2.0.0          #>  [28] progress_1.2.3          DelayedArray_0.34.1     BiocParallel_1.42.2     #>  [31] prettyunits_1.2.0       irlba_2.3.5.1           parallel_4.5.1          #>  [34] cluster_2.1.8.1         R6_2.6.1                bslib_0.9.0             #>  [37] stringi_1.8.7           RColorBrewer_1.1-3      limma_3.64.3            #>  [40] boot_1.3-31             jquerylib_0.1.4         Rcpp_1.1.0              #>  [43] knitr_1.50              Matrix_1.7-3            splines_4.5.1           #>  [46] igraph_2.1.4            tidyselect_1.2.1        abind_1.4-8             #>  [49] yaml_2.3.10             viridis_0.6.5           codetools_0.2-20        #>  [52] lattice_0.22-7          tibble_3.3.0            plyr_1.8.9              #>  [55] S7_0.2.0                evaluate_1.0.5          desc_1.4.3              #>  [58] pillar_1.11.1           checkmate_2.3.3         reformulas_0.4.1        #>  [61] hms_1.1.3               ggplot2_4.0.0           scales_1.4.0            #>  [64] minqa_1.2.8             gtools_3.9.5            glue_1.8.0              #>  [67] metapod_1.16.0          tools_4.5.1             BiocNeighbors_2.2.0     #>  [70] data.table_1.17.8       ScaledMatrix_1.16.0     lme4_1.1-37             #>  [73] locfit_1.5-9.12         fs_1.6.6                scran_1.36.0            #>  [76] grid_4.5.1              rbibutils_2.3           edgeR_4.6.3             #>  [79] nlme_3.1-168            GenomeInfoDbData_1.2.14 beeswarm_0.4.0          #>  [82] BiocSingular_1.24.0     vipor_0.4.7             cli_3.6.5               #>  [85] rsvd_1.0.5              textshaping_1.0.3       S4Arrays_1.8.1          #>  [88] viridisLite_0.4.2       dplyr_1.1.4             gtable_0.3.6            #>  [91] sass_0.4.10             digest_0.6.37           SparseArray_1.8.1       #>  [94] ggrepel_0.9.6           dqrng_0.4.1             farver_2.1.2            #>  [97] htmltools_0.5.8.1       pkgdown_2.1.3           lifecycle_1.0.4         #> [100] httr_1.4.7              statmod_1.5.0           MASS_7.3-65"},{"path":"https://ewynn610.github.io/rescueSim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Elizabeth Wynn. Author, maintainer.","code":""},{"path":"https://ewynn610.github.io/rescueSim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wynn E (2025). rescueSim: Repeated Measures Single Cell RNA-sequencing Data Simulation. R package version 0.99.0, https://github.com/ewynn610/rescueSim.","code":"@Manual{,   title = {rescueSim: Repeated Measures Single Cell RNA-sequencing Data Simulation},   author = {Elizabeth Wynn},   year = {2025},   note = {R package version 0.99.0},   url = {https://github.com/ewynn610/rescueSim}, }"},{"path":"https://ewynn610.github.io/rescueSim/index.html","id":"rescuesim-repeated-measures-single-cell-rna-sequencing-data-simulation","dir":"","previous_headings":"","what":"Repeated Measures Single Cell RNA-sequencing Data Simulation","title":"Repeated Measures Single Cell RNA-sequencing Data Simulation","text":"rescueSim R package simulating repeated measures (paired/longitudinal) single-cell RNA-sequencing (scRNA-seq) data. designed support power analysis, benchmarking, method development studies involving complex scRNA-seq designs.","code":""},{"path":"https://ewynn610.github.io/rescueSim/index.html","id":"explore-rescuesim","dir":"","previous_headings":"","what":"Explore rescueSim","title":"Repeated Measures Single Cell RNA-sequencing Data Simulation","text":"Introduction rescueSim Power analysis rescueSim Function Documentation","code":""},{"path":[]},{"path":"https://ewynn610.github.io/rescueSim/index.html","id":"install-dependencies","dir":"","previous_headings":"Getting started","what":"Install dependencies","title":"Repeated Measures Single Cell RNA-sequencing Data Simulation","text":"","code":"## CRAN packages install.packages(c(\"checkmate\", \"dplyr\", \"gtools\", \"Matrix\", \"lme4\"))  ## Bioconductor packages if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(c(\"scater\", \"edgeR\", \"scran\", \"scater\", \"scuttle\", \"SingleCellExperiment\", \"MAST\"))"},{"path":"https://ewynn610.github.io/rescueSim/index.html","id":"install-rescuesim-from-github","dir":"","previous_headings":"Getting started","what":"Install rescueSim from GitHub","title":"Repeated Measures Single Cell RNA-sequencing Data Simulation","text":"Note: package vignettes available package website. ’d prefer build vignettes locally installation, can set build_vignettes = TRUE, though may take longer.","code":"if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") } devtools::install_github(\"https://github.com/ewynn610/rescueSim\",  build_vignettes = FALSE)"},{"path":"https://ewynn610.github.io/rescueSim/reference/RecAM_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Example RNA-Seq data from paired observations — RecAM_params","title":"Example RNA-Seq data from paired observations — RecAM_params","text":"Sample RescueSimParams object gene expression data recruited airspace macrophage cells bronchoalveolar lavage samples samples collected healthy adults. dataset parameters estimated 19,410 genes 9,041 cells. Data collected five subjects two timepoints per subject.","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/RecAM_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example RNA-Seq data from paired observations — RecAM_params","text":"","code":"data(RecAM_params)"},{"path":"https://ewynn610.github.io/rescueSim/reference/RecAM_params.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example RNA-Seq data from paired observations — RecAM_params","text":"RescueSimParams object parameters estimated empirical dataset","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/RecAM_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Repeated Measures scRNA-Seq Data — RecAM_sce","title":"Example Repeated Measures scRNA-Seq Data — RecAM_sce","text":"Sample SingleCellExperiment object gene expression data recruited airspace macrophage cells bronchoalveolar lavage samples collected healthy adults. data subset contain gene expression 1940 genes 976 cells. Data collected five subjects two timepoints per subject. Genes included dataset assessed invariant across timepoints.","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/RecAM_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Repeated Measures scRNA-Seq Data — RecAM_sce","text":"","code":"data(RecAM_sce)"},{"path":"https://ewynn610.github.io/rescueSim/reference/RecAM_sce.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Repeated Measures scRNA-Seq Data — RecAM_sce","text":"SingleCellExperiment object following data object slots: counts Matrix raw counts genes represented rows cells represented columns. colData  sampleID Sample identifier subjectID Subject identifier time Timepoint identifier group Group identifier","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/RecAM_sce.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Repeated Measures scRNA-Seq Data — RecAM_sce","text":".","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/RescueSimParams-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The RescueSimParams Class — RescueSimParams-class","title":"The RescueSimParams Class — RescueSimParams-class","text":"Class holding parameters used simulate data using rescueSim","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/RescueSimParams-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The RescueSimParams Class — RescueSimParams-class","text":"nTimepoints Number timepoints (.e. samples) per subject. Holds single numeric value >0 representing number timepoints subjects. twoGroupDesign Logical value indicating whether simulate two groups (ex. treatment control group). nSubjsPerGroup Number subjects per group (using two group design) number total subjects (single group). Holds single numeric value >0 indicating number subjects per group. maxCellsPerSamp Maximum parameter used drawing number cells per sample discrete uniform distribution. Holds single numeric value  >0 indicating maximum number cells per sample, vector  length equal number conditions (group/timepoint combinations)  value representing maximum single condition,  vector length equal number total samples value  representing maximum single sample. minCellsPerSamp Minimum parameter used drawing number cells per sample discrete uniform distribution. Holds single numeric value >0 indicating minimum number cells per sample, vector length equal number conditions (group/timepoint combinations) value representing minimum single condition, vector length equal number total samples value representing minimum single sample. logLibMean Mean library size (log scale) parameter. Used draw library size log-normal distribution. Holds single value >0 indicating mean library size log scale. logLibSD Library size standard deviation (log scale) parameter. Used draw library size log-normal distribution. Holds single value >=0 indicating standard deviation library size log scale. customLibSizes optional numeric vector user-provided library sizes. provided, library sizes simulation sampled (replacement) vector instead default log-normal distribution. Log-transformed values adjusted sample specific factor average log library size equals overall average multiplied sample-specific factor. logLibFacVar Variance used drawing sample-level multiplicative factors give different library size distributions sample. Larger values result larger variation library size distributions sample. Holds single value >=0 0 indicating difference library size distributions sample. exprsMean Gene-specific mean expression value representing average expression gene dataset. Holds vector numeric values >=0 length equal desired number genes simulated data value indicates average expression single gene. named vector given, names used gene names simulated SingleCellExperiment object. dispersion Gene-specific dispersion value representing variation expression gene dataset. Holds vector numeric values >0 length equal desired number genes simulated data value indicates dispersion single gene. sampleFacVarMean Mean used drawing variance (log-scale) sample-level multiplicative factors. Larger values result -sample variation. sampleFacVarSD Standard deviation used drawing variance (log-scale) sample-level multiplicative factors. Larger values result variation amount -sample variation across different genes. Must value >=0 subjectFacVarMean Mean used drawing variance (log-scale) subject-level multiplicative factors. Larger values result larger -subject variation. subjectFacVarSD Standard deviation used drawing variance (log-scale) subject-level multiplicative factors. Larger values result variation amount -subject variation across different genes. Must value >=0. propDE Proportion genes differentially expressed timepoints/groups. Must numeric value 0 1. deLog2FC Fold change values used differentially expressed genes. Specifies log2 fold changes differentially expressed (DE) genes. values interpreted relative common baseline condition: time0 /group0. Acceptable formats include: single numeric value >= 0, indicating absolute log2 fold    change baseline final condition. Log2 fold changes     randomly assigned positive negative across DE genes. numeric vector possible log2 fold change values (positive /   negative) values randomly drawn DE genes. named list numeric vectors specifying gene-specific log2 fold   changes experimental condition, relative baseline   (\"time0\", \"group0\", \"time0_group0\"   depending design). vector must length equal number   genes. Valid names list elements depend experimental design: single-group, multi-timepoint designs: \"time1\",     \"time2\", etc. two-group, single-timepoint designs: \"group1\" multi-timepoint, two-group designs: \"time1_group0\",     \"time1_group1\", etc. reference condition — \"time0\", \"group0\",   \"time0_group0\" — must included list,    implicitly treated log2FC = 0. single value vector provided (.e., list), log2 fold changes applied structured way: two-group, two-timepoint designs: group 0 shows change   time, group 1 exhibits linear change time 0   specified log2FC. designs two timepoints: linear trajectory   simulated, log2FC value represents total change time 0   final timepoint.","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/RescueSimParams-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The RescueSimParams Class — RescueSimParams-class","text":"Elizabeth Wynn","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/RescueSimParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate RescueSimParams object — RescueSimParams","title":"Generate RescueSimParams object — RescueSimParams","text":"Generate RescueSimParams object","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/RescueSimParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate RescueSimParams object — RescueSimParams","text":"","code":"RescueSimParams(deLog2FC = 0, propDE = 0, ...)"},{"path":"https://ewynn610.github.io/rescueSim/reference/RescueSimParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate RescueSimParams object — RescueSimParams","text":"deLog2FC Initial value deLog2FC param. Default 0 (differential expression). propDE Initial value propDE param. Default 0 (differentialy expressed genes). ... parameter name followed initial valus","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/RescueSimParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate RescueSimParams object — RescueSimParams","text":"object class RescueSimParams","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/RescueSimParams.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate RescueSimParams object — RescueSimParams","text":"Elizabeth Wynn","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/RescueSimParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate RescueSimParams object — RescueSimParams","text":"","code":"## Create params object myParams <- RescueSimParams()  ## Create parameter object with nTimepoints and nSubjsPerGroup pre-set myParams <- RescueSimParams(nTimepoints = 2, nSubjsPerGroup = 5)"},{"path":"https://ewynn610.github.io/rescueSim/reference/estRescueSimParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate rescueSim Parameters — estRescueSimParams","title":"Estimate rescueSim Parameters — estRescueSimParams","text":"Estimate parameters used simulate repeated measures scRNA-Seq data","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/estRescueSimParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate rescueSim Parameters — estRescueSimParams","text":"","code":"estRescueSimParams(   sce,   paramObj = NULL,   sampleVariable = NULL,   subjectVariable = NULL,   groupVariable = NULL,   timepointVariable = NULL,   nonDEGs = NULL,   cellParamsByCondition = FALSE )"},{"path":"https://ewynn610.github.io/rescueSim/reference/estRescueSimParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate rescueSim Parameters — estRescueSimParams","text":"sce SingleCellExperiment object containing empirical data counts matrix counts slot cell level data (ex. sample/subject/timepoint labels) colData slot. paramObj RescueSimParams-class object empty slots parameters need estimated parameters. NULL, parameter values estimated. sampleVariable String denoting name sample identifier variable colData SingleCellExperiment object. NULL, data assumed contain one sample parameters  sampleFacVarMean sampleFacVarSD parameters estimated. subjectVariable String denoting name subject identifier variable colData SingleCellExperiment object. NULL, parameters subjectFacVarMean subjectFacVarSD parameters estimated. groupVariable String denoting name group identifier variable colData SingleCellExperiment object. NULL, single group design assumed. timepointVariable String denoting name timepoint identifier variable colData SingleCellExperiment object. NULL, number timepoints simulated data set 1. nonDEGs Vector containing names row indices genes used estimate sample subject factor parameters. Using genes differentially expressed across timepoints may lead inaccurate estimates. cellParamsByCondition Logical value indicating whether maxCellsPerSamp minCellsPerSamp estimated condition (group/timepoint) overall.","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/estRescueSimParams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate rescueSim Parameters — estRescueSimParams","text":"parameters RescueSimParams-class object can estimated/extracted empirical data except propDE deLog2FC set 0 (differential expression) set manually. paramObj provided, parameters empty slots object estimated.","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/estRescueSimParams.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate rescueSim Parameters — estRescueSimParams","text":"Elizabeth Wynn","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/estRescueSimParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate rescueSim Parameters — estRescueSimParams","text":"","code":"## Load the data data(\"RecAM_sce\")  ## Subset data to 40 genes RecAM_sce_small <- RecAM_sce[1:40, ]  ## Estimate all parameters from the data myParams_estimated <- estRescueSimParams(   sce = RecAM_sce_small, paramObj = NULL,   sampleVariable = \"sampleID\",   subjectVariable = \"subjectID\",   timepointVariable = \"time\",   groupVariable = NULL, nonDEGs = NULL,   cellParamsByCondition = FALSE )  ## Example using Single timepoint data  ## Subset the data to a single timepoint RecAM_sce_single_time <- RecAM_sce_small[, RecAM_sce_small$time == \"time0\"] ## Create a params object with necessary parameters filled myParams <- RescueSimParams(subjectFacVarMean = -4, subjectFacVarSD = 1, nSubjsPerGroup = 5) ## Estimate remaining parameters from the data myParams_estimated <- estRescueSimParams(   sce = RecAM_sce_single_time,   paramObj = myParams,   sampleVariable = \"sampleID\" ) #> Warning: Since subjectVariable is NULL, subjectFacVarMean and subjectFacVarSD cannot be estimated."},{"path":"https://ewynn610.github.io/rescueSim/reference/getRescueSimParam.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Parameters — getRescueSimParam","title":"Extract Parameters — getRescueSimParam","text":"Extract individual parameters RescueSimParams object","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/getRescueSimParam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Parameters — getRescueSimParam","text":"","code":"getRescueSimParam(paramObj, paramName)"},{"path":"https://ewynn610.github.io/rescueSim/reference/getRescueSimParam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Parameters — getRescueSimParam","text":"paramObj Object class RescueSimParams-class paramName String containing parameter like extract","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/getRescueSimParam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Parameters — getRescueSimParam","text":"Specified parameter value","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/getRescueSimParam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Parameters — getRescueSimParam","text":"","code":"## Create Parameter object myParams <- RescueSimParams(nTimepoints = 2)  ## Check Values getRescueSimParam(myParams, \"nTimepoints\") #> [1] 2"},{"path":"https://ewynn610.github.io/rescueSim/reference/isDEbetweenConditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Genes Simulated to Be Differentially Expressed Between Conditions — isDEbetweenConditions","title":"Identify Genes Simulated to Be Differentially Expressed Between Conditions — isDEbetweenConditions","text":"Returns logical vector indicating whether gene simulated differentially expressed two conditions SingleCellExperiment generated rescueSim package.","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/isDEbetweenConditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Genes Simulated to Be Differentially Expressed Between Conditions — isDEbetweenConditions","text":"","code":"isDEbetweenConditions(sce, condition1, condition2)"},{"path":"https://ewynn610.github.io/rescueSim/reference/isDEbetweenConditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Genes Simulated to Be Differentially Expressed Between Conditions — isDEbetweenConditions","text":"sce SingleCellExperiment object simulated using rescueSim::simRescueData(), log2 fold change annotations stored rowData. condition1 character string specifying first condition. can baseline reference (e.g. \"time0\", \"group0\", \"time0_group0\") condition present rowData (without \"deLog2FC.\" prefix). condition2 character string specifying second condition, interpreted way condition1.","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/isDEbetweenConditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Genes Simulated to Be Differentially Expressed Between Conditions — isDEbetweenConditions","text":"named logical vector indicating whether gene simulated differentially expressed condition1 condition2. Names correspond gene names.","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/isDEbetweenConditions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Genes Simulated to Be Differentially Expressed Between Conditions — isDEbetweenConditions","text":"log2 fold changes defined relative baseline reference condition—typically \"time0\", \"group0\", \"time0_group0\"—stored rowData column names form \"deLog2FC.<condition>\". Reference conditions included rowData. one specified conditions reference, function checks whether corresponding log2 fold change column non-zero. non-reference, checks whether two log2 fold change columns differ. function perform statistical test; simply reports whether gene simulated differentially expressed two conditions based stored simulation parameters.","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/isDEbetweenConditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Genes Simulated to Be Differentially Expressed Between Conditions — isDEbetweenConditions","text":"","code":"# Read in data  data(\"RecAM_sce\")   # Calculate sim parameters for first 50 genes RecAM_sce <- RecAM_sce[1:50,] RecAM_params<-estRescueSimParams(RecAM_sce, sampleVariable = \"sampleID\", subjectVariable = \"subjectID\", timepointVariable = \"time\")   # Simulate data simDat=simRescueData(RecAM_params)  is_de <- isDEbetweenConditions(simDat, \"time1\", \"time0\")"},{"path":"https://ewynn610.github.io/rescueSim/reference/rescueSim-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rescueSim: Repeated Measures Single Cell RNA-sequencing Data Simulation — rescueSim-package","title":"rescueSim: Repeated Measures Single Cell RNA-sequencing Data Simulation — rescueSim-package","text":"package simulating data repeated measures scRNA-seq studies.","code":""},{"path":[]},{"path":"https://ewynn610.github.io/rescueSim/reference/rescueSim-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rescueSim: Repeated Measures Single Cell RNA-sequencing Data Simulation — rescueSim-package","text":"Maintainer: Elizabeth Wynn wynne@njhealth.org","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/runRescueSimPower.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Power Simulations for rescueSim Data — runRescueSimPower","title":"Run Power Simulations for rescueSim Data — runRescueSimPower","text":"Simulate scRNA-seq data different experimental settings compute statistical power detect differential expression (DE) using user-specified DE function.","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/runRescueSimPower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Power Simulations for rescueSim Data — runRescueSimPower","text":"","code":"runRescueSimPower(   baseParams,   scenarios,   deFunction,   nSim = 1,   padjThresh = 0.05,   returnFDR = FALSE,   conditions = NULL,   saveSimPath = NULL,   saveDePath = NULL,   verbose = TRUE,   ... )"},{"path":"https://ewynn610.github.io/rescueSim/reference/runRescueSimPower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Power Simulations for rescueSim Data — runRescueSimPower","text":"baseParams RescueSimParams object containing baseline simulation parameters. scenarios data.frame specifying simulation settings vary. Column names must match slots RescueSimParams object. row defines one scenario. deFunction function takes SingleCellExperiment object simulated using simRescueData returns data.frame columns gene padj. nSim Integer specifying number simulations run per scenario. Default 1. padjThresh Significance threshold call DE (e.g., FDR < 0.05). Default 0.05. returnFDR Logical. Whether calculate return false discovery rate (FDR) along power. Default TRUE. conditions character vector length 2 specifying conditions compare (e.g., c(\"time1\", \"time3_group1\")). NULL (default), comparison inferred based available conditions rowData, comparing baseline condition (e.g., \"time0\", \"group0\", \"time0_group0\") final condition (e.g., last timepoint, group 1 final timepoint). saveSimPath Optional path directory simulated SCE objects saved .rds files. NULL (default), simulated data saved. saveDePath Optional path directory DE result data.frames saved .rds files. NULL (default), results saved. verbose Logical. Whether print progress messages. Default TRUE. ... Additional arguments passed deFunction().","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/runRescueSimPower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Power Simulations for rescueSim Data — runRescueSimPower","text":"data.frame one row per simulation replicate, including: Power: proportion truly DE genes detected FDR: false discovery rate (returnFDR = TRUE) Scenario settings simulation number reference comparison condition used Optionally, simulated datasets DE results can saved disk.","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/runRescueSimPower.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Power Simulations for rescueSim Data — runRescueSimPower","text":"scenario, function simulates nSim datasets based , supplied settings, applies user-supplied DE method, calculates power proportion true DE genes correctly identified. DE status determined assessing equality  simulated log2 fold-change values conditions. False discovery rate (FDR) optionally calculated proportion genes called DE truly DE.","code":""},{"path":[]},{"path":"https://ewynn610.github.io/rescueSim/reference/simRescueData.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Repeated Measures scRNA-seq Data — simRescueData","title":"Simulate Repeated Measures scRNA-seq Data — simRescueData","text":"Simulate Repeated Measures scRNA-seq Data using RESCUE method","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/simRescueData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Repeated Measures scRNA-seq Data — simRescueData","text":"","code":"simRescueData(paramObj)"},{"path":"https://ewynn610.github.io/rescueSim/reference/simRescueData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Repeated Measures scRNA-seq Data — simRescueData","text":"paramObj RescueSimParams-class object empty slots.","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/simRescueData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Repeated Measures scRNA-seq Data — simRescueData","text":"SingleCellExperiment object data following slots counts Matrix raw counts genes represented rows cells represented columns. colData  sampleID Sample identifier subjectID Subject identifier time Timepoint identifier group Group identifier  rowData  deLog2FC DataFrame containing log2 fold change information gene.     column corresponds non-reference experimental condition     (e.g., \"time1\", \"group1\", \"time1_group1\", etc.), values represent     gene-level log2 fold changes relative baseline condition     (\"time0\", \"group0\", \"time0_group0\" depending design).     reference condition included column.","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/simRescueData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Repeated Measures scRNA-seq Data — simRescueData","text":"","code":"# Read in data  data(\"RecAM_sce\")   # Calculate sim parameters for first 50 genes RecAM_sce <- RecAM_sce[1:50,] RecAM_params<-estRescueSimParams(RecAM_sce, sampleVariable = \"sampleID\", subjectVariable = \"subjectID\", timepointVariable = \"time\")   # Simulate data simDat=simRescueData(RecAM_params)  # Examine library(SingleCellExperiment) #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #> Loading required package: generics #>  #> Attaching package: ‘generics’ #> The following objects are masked from ‘package:base’: #>  #>     as.difftime, as.factor, as.ordered, intersect, is.element, setdiff, #>     setequal, union #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, is.unsorted, lapply, #>     mapply, match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     rank, rbind, rownames, sapply, saveRDS, table, tapply, unique, #>     unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians counts(simDat)[1:5, 1:5] #>            cell_1 cell_2 cell_3 cell_4 cell_5 #> NOC2L           0      1      2      1      1 #> SCNN1D          0      0      0      0      0 #> AL391244.3      0      0      0      0      1 #> AL645728.1      0      0      0      1      0 #> AL691432.2      0      0      0      0      2"},{"path":"https://ewynn610.github.io/rescueSim/reference/updateRescueSimParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Update RescueSimParams object — updateRescueSimParams","title":"Update RescueSimParams object — updateRescueSimParams","text":"Manually update parameters RescueSimParams object","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/updateRescueSimParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update RescueSimParams object — updateRescueSimParams","text":"","code":"updateRescueSimParams(paramObj, paramValues)"},{"path":"https://ewynn610.github.io/rescueSim/reference/updateRescueSimParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update RescueSimParams object — updateRescueSimParams","text":"paramObj Object class RescueSimParams-class paramValues List parameter values list names parameter names","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/updateRescueSimParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update RescueSimParams object — updateRescueSimParams","text":"Object class RescueSimParams-class specified parameters updated","code":""},{"path":"https://ewynn610.github.io/rescueSim/reference/updateRescueSimParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update RescueSimParams object — updateRescueSimParams","text":"","code":"## Create Parameter object myParams <- RescueSimParams()  ## Update nTimepoints and nSubjsPerGroup myParams <- updateRescueSimParams(   paramObj = myParams,   paramValues = list(     nTimepoints = 3,     nSubjsPerGroup = 10   ) ) ## Check Values getRescueSimParam(myParams, \"nTimepoints\") #> [1] 3 getRescueSimParam(myParams, \"nSubjsPerGroup\") #> [1] 10"}]
